/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    Solution(){
        ios::sync_with_stdio(false);
        cin.tie(NULL);
        cout.tie(NULL);
    }
    ListNode* oddEvenList(ListNode* head) {
        ListNode* newHead = NULL;
        ListNode* temp = head;
        ListNode* tmp = NULL;
        int cnt = 1;
        while(temp){
            if(cnt%2!=0){
                cout<<temp->val<<" ";
                ListNode* newNode = new ListNode(temp->val);
                if(newHead == NULL){
                    newHead = newNode;
                    newHead->next = NULL;
                    tmp = newHead;
                }else{
                    tmp->next = newNode;
                    tmp = tmp->next;
                    tmp->next = NULL;
                }
            }
            cnt++;
            temp = temp->next;
        }
        cnt = 1;
        temp = head;
        while(temp){
            if(cnt%2 == 0){
                ListNode* newNode = new ListNode(temp->val);
                tmp->next = newNode;
                tmp = tmp->next;
                tmp->next = NULL;
            }
            cnt++;
            temp = temp->next;
        }
        return newHead;
    }
};